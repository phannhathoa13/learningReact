‚úÖ M·ª•c 3: State & Event
üß† C√¢u h·ªèi:
useState l√† g√¨? L√†m sao ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã?
=> useState l√† 1 h√†m c·ªßa React n√≥ d√πng ƒë·ªÉ l∆∞u gi√° tr·ªã v√† s·∫Ω ch·∫°y l·∫°i UI khi c√≥ s·ª± thay ƒë·ªïi
// l√† m·ªôt h√†m tr·∫£ v·ªÅ gi√° tr·ªã [] ch·ª©a 2 gi√° tr·ªã l√† gi√° tr·ªã v√† function ƒë·ªÉ set g√≠a tr·ªã

=> ƒê·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã: ta s·∫Ω d√πng setState ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã v√† setState s·∫Ω re-render l·∫°i compoents

v·∫≠y n·∫øu nh∆∞ cha setState th√¨ con c√≥ b·ªã rerender l·∫°i kh√¥ng ?
v√† gi·∫£ s·ª≠ nh∆∞ nh∆∞ ph·∫ßn con kh√¥ng c√≥ prop l√† state th√¨ m·ªói khi cha setState c·ªßa m√¨nh th√¨ con c√≥ b·ªã rerender l·∫°i kh√¥ng ?

cha set state th√¨ c√°c con c√≥ rerender kh√¥ng ?
tr∆∞·ªùng h·ª£p n√†o l√† t·∫•t c·∫£ s·∫Ω rerender l·∫°i ?

1// tr·∫£ l·ªùi
<cha>
  [Test,setTest]=useState(true);
  setTest(false)
  <con>
    <con>
      <con>
</cha>

2// tr·∫£ l·ªùi
<cha> 
  [Test,setTest]=useState(true);
  setTest(false)
  <con ={Test}>
    <con ={Test}>
      <con ={Test}>
</cha>

State thay ƒë·ªïi th√¨ component c√≥ render l·∫°i kh√¥ng?
=> C√≥

S·ª± ki·ªán trong React kh√°c g√¨ so v·ªõi HTML? // hay
=> S·ª± ki·ªán trong React s·∫Ω nh·∫≠n tr·ª±c ti·∫øp function v√† t√¥i c√≥ th·ªÉ x·ª≠ l√≠ logic, v√† ch√®n nhi·ªÅu ƒëo·∫°n code js
v√†o, v√† c≈©ng c√≥ th·ªÉ c·∫≠p nh·∫≠t l·∫°i UI b·∫±ng c√°ch return v·ªÅ jsx
=> S·ª± ki·ªán trong html th√¨ ko th·ªÉ nh·∫≠n tr·ª±c ti·∫øp funtion n√™n t√¥i ko th·ªÉ x·ª≠ l√≠ logic ho·∫∑c ch√®n js v√†o ƒë∆∞·ª£c,
HTML ch·ªâ nh·∫≠n 1 chu·ªói JS

üß™ B√†i t·∫≠p:
L√†m m·ªôt Counter c√≥ n√∫t tƒÉng/gi·∫£m/reset.
=> function Counter() {
let [count, setCount] = useState(0);

return (

<div>
  You clicked {count} time
  <button onClick={()=> setCount(count + 1)}>Increase</button>
  <button onClick={()=> setCount(count - 1)}>Decrease</button>
  <button onClick={()=> setCount(count = 0)}>Reset</button>
</div>
)
}

√î nh·∫≠p t√™n ng∆∞·ªùi d√πng + n√∫t "Hi·ªÉn th·ªã t√™n" (c√≥ d√πng state).
=> function DisplayTextInput() {
const [textInput, setTextInput] = useState("");
const [showMassage, setShowMassage] = useState(false);
return (

<div>
  <input type="text" placeholder="Enter your name" onInput={(event)=> setTextInput(event.target.value)} />
  <button onClick={()=> setShowMassage(!showMassage)}>Hi·ªÉn th·ªã t√™n</button>
  {showMassage ? <p>Hello {textInput}</p> : null}
</div>
)
}

Component b·∫≠t/t·∫Øt ƒë√®n (true/false ‚Üí hi·ªÉn th·ªã tr·∫°ng th√°i).
=> function ChangeStateDisplay() {
const [isDark, setIsDark] = useState(false);
return (
<>
<button onClick={()=> setIsDark(!isDark)}>
{isDark ? "Light Mode" : "Dark Mode"}
</button>
{isDark ? setColorBackGround("black") : setColorBackGround("white")}
</>
)
}

=> function setColorBackGround(color) {
return (

<div style={{ backgroundColor: color, width: "400px" , height: "400px" }}></div>
)
}

Th·ª≠ vi·∫øt m·ªôt n√∫t "ƒê·ªïi m√†u n·ªÅn" m·ªói l·∫ßn click. // h·ªçc ramdom trong js ƒë·ªÉ l√†m
=> function ChangeColorDisplay() {
const [colorState, setColorState] = useState(true);

let x = getRamdomNumber();
let y = getRamdomNumber();
let z = getRamdomNumber();

return (

<div>
  <button onClick={()=> setColorState(!colorState)}>Change Color</button>
  {colorState ? setRGBBackgroundColor(x, y, z) : setRGBBackgroundColor(x, y, z)}
</div>
)
}

=> function getRamdomNumber() {
return Math.floor(Math.random() \* 256);
}
=> function setRGBBackgroundColor(x, y, z) {
return (

<div style={{ backgroundColor: `rgb(${x},${y},${z})`, width: "400px" , height: "400px" }}></div>
)
}
